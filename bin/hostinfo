#!/bin/bash
# Description: Displays basic system information
# Modified:    2018 Feb 10

##############################################################################
#  Copyright (C) 2018 SUSE LLC
##############################################################################
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; version 2 of the License.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, see <http://www.gnu.org/licenses/>.
#
#  Authors/Contributors:
#     Jason Record (jason.record@suse.com)
#
##############################################################################

##############################################################################
# Variables
##############################################################################
SVER='1.7.0'
PAD=25
QUIET=0
FORMAT_OUT="%-${PAD}s %s\n"
CONFIG_FILE='/etc/hostinfo.conf'
ISSUE_BASE='/run/issue.d'
FILE_HOSTINFO=''
FILE_BASE="80-hostinfo-"

if [[ -s $CONFIG_FILE ]]
then
	. $CONFIG_FILE
else
	echo "Error: Missing $CONFIG_FILE"
	exit 2
fi

##############################################################################
# Functions
##############################################################################
getHelp()
{
	echo "hostinfo - Gathers host information"
	echo
	echo "USAGE: hostinfo [OPTIONS]"
	echo "OPTIONS"
	echo " -h This help screen"
	echo " -n Ignore network address output"
	echo " -m Ignore memory output"
	echo " -d Ignore disk output"
	echo " -u Ignore updates output"
	echo " -q Quiet mode"
	echo " -v View the current root-motd"
	echo
}

getHostname()
{
	FILE_HOSTINFO="${ISSUE_BASE}/${FILE_BASE}03-host" 
	printf "$FORMAT_OUT" "Hostname:" "\n" > $FILE_HOSTINFO
}

getDate()
{
	FILE_HOSTINFO="${ISSUE_BASE}/${FILE_BASE}02-date" 
	printf "$FORMAT_OUT" "Current As Of:" "$(date '+%c')" > $FILE_HOSTINFO
}

getDistribution()
{
	FILE_HOSTINFO="${ISSUE_BASE}/${FILE_BASE}01-distro" 
	RELEASE_FILE='/etc/os-release'
	PRETTY_NAME=$(cat ${RELEASE_FILE} | grep PRETTY_NAME | cut -d\= -f2 | tr -d '"')
	DIST=$(sed -e "s/ SP.//g" <<< $PRETTY_NAME)
	SPSTR="0"
	if echo $PRETTY_NAME | grep SP &>/dev/null; then
		SPTMP=$(echo $PRETTY_NAME | awk '{print $NF}')
		SPSTR=${SPTMP##SP}
	fi
	printf "$FORMAT_OUT" "Distribution:" "$DIST SP${SPSTR}" > $FILE_HOSTINFO
}

getKernel()
{
	FILE_HOSTINFO="${ISSUE_BASE}/${FILE_BASE}04-kernel" 
	KERNEL_STR=$(uname -r)
	KERNEL_TYPE=$(awk -F- '{print $NF}' <<< $KERNEL_STR)
	KERN_RPM="kernel-${KERNEL_TYPE}"
	KERN_RPM_VERSION="${KERN_RPM}-${KERNEL_STR%%-$KERNEL_TYPE}*"
	KERN_DATE=$(rpm -q --queryformat "%{INSTALLTIME:date}" $KERN_RPM_VERSION 2>/dev/null)
	if [[ -n "$KERN_DATE" ]]; then
		KERN_DATE_STR="$KERN_DATE"
	else
		KERN_DATE_STR="Unknown"
	fi
	TAINT=$(cat /proc/sys/kernel/tainted)
	TAINTED=0
	if (( ${#TAINT} > 1 )); then
		TAINTED=1
	elif (( ${TAINT} > 0 )); then
		TAINTED=1
	fi
	if (( TAINTED )); then
		KERN_TAINT_STR="Tainted: ${TAINT}"
	else
		KERN_TAINT_STR="Not Tainted"
	fi

	printf "$FORMAT_OUT" "Kernel Version:" "\r" >> $FILE_HOSTINFO
	printf "$FORMAT_OUT" " Architecture:" "\m" >> $FILE_HOSTINFO
	printf "$FORMAT_OUT" " Installed:" "$KERN_DATE_STR" >> $FILE_HOSTINFO
	printf "$FORMAT_OUT" " Status:" "$KERN_TAINT_STR" >> $FILE_HOSTINFO
}

getNetAddr() {
	FILE_HOSTINFO="${ISSUE_BASE}/${FILE_BASE}06-network" 
	if (( IGNORE_NET )); then
		rm -f $FILE_HOSTINFO
	else
		rm -f /run/issue.d/70-e*conf
	fi

	NET_LIST="$(ip address)
"
	MASTER=''
	IFACE=''
	ADDR4=''
	ADDR6=''
	STR_LABEL=''
	STR_ADDR=''
	RE_START='^[0-9]'
	RE_IPV4='inet '
	RE_IPV6='inet6 '
	echo "Network Interfaces" > $FILE_HOSTINFO
	echo "$NET_LIST" | while read LINE
	do
#		echo "Pre:    MASTER=$MASTER IFACE=$IFACE #ADDR4=${#ADDR4} #ADDR6=${#ADDR6} #LINE=${#LINE} : $LINE"
		if (( ${#LINE} < 1 )); then
#			echo "Line0:  MASTER=$MASTER IFACE=$IFACE #ADDR4=${#ADDR4} #ADDR6=${#ADDR6} #LINE=${#LINE} : $LINE"
			STR_ADDR=''
			if (( ${#ADDR4} > 0 )); then
				STR_LABEL=" ${IFACE}:"
				STR_ADDR="$ADDR4"
			fi
			if (( ${#ADDR6} > 0 )); then
				if (( ${#STR_ADDR} > 0 )); then
					STR_ADDR="$STR_ADDR $ADDR6"
				else
					STR_LABEL=" ${IFACE}:"
					STR_ADDR="$ADDR6"
				fi
			fi
			if (( ${#STR_ADDR} < 1 )); then
				if (( ${#MASTER} > 0 )); then
					STR_LABEL=" ${IFACE}:"
					STR_ADDR="(Slave to $MASTER)"
				else
					STR_LABEL=" ${IFACE}:"
					STR_ADDR="(Unconfigured)"
				fi
			fi
			printf "$FORMAT_OUT" "$STR_LABEL" "$STR_ADDR" >> $FILE_HOSTINFO
		elif [[ "$LINE" =~ $RE_START ]]; then
			if (( ${#IFACE} > 0 )); then
				STR_ADDR=''
				if (( ${#ADDR4} > 0 )); then
					STR_LABEL=" ${IFACE}:"
					STR_ADDR="$ADDR4"
				fi
				if (( ${#ADDR6} > 0 )); then
					if (( ${#STR_ADDR} > 0 )); then
						STR_ADDR="$STR_ADDR $ADDR6"
					else
						STR_LABEL=" ${IFACE}:"
						STR_ADDR="$ADDR6"
					fi
				fi
				if (( ${#STR_ADDR} < 1 )); then
					if (( ${#MASTER} > 0 )); then
						STR_LABEL=" ${IFACE}:"
						STR_ADDR="(Slave to $MASTER)"
					else
						STR_LABEL=" ${IFACE}:"
						STR_ADDR="(Unconfigured)"
					fi
				fi
				printf "$FORMAT_OUT" "$STR_LABEL" "$STR_ADDR" >> $FILE_HOSTINFO
			fi
			MASTER=''
			ADDR4=''
			ADDR6=''
			IFACE=''
			LINE_ARRAY=($LINE)
			IFACE=${LINE_ARRAY[1]//:/}
			if [[ "$IFACE" == "lo" ]]; then
				IFACE=''
			else
				MASTER_IDX=$(echo ${LINE_ARRAY[@]/master//} | cut -d/ -f1 | wc -w | tr -d ' ')
				if (( $MASTER_IDX != ${#LINE_ARRAY[@]} )); then
					(( MASTER_IDX++ ))
					MASTER=${LINE_ARRAY[$MASTER_IDX]}
				fi
			fi
		elif [[ "$LINE" =~ $RE_IPV4 ]]; then
			LINE_ARRAY=($LINE)
			ADDR4=${LINE_ARRAY[1]}
		elif [[ "$LINE" =~ $RE_IPV6 ]]; then
			LINE_ARRAY=($LINE)
			ADDR6=${LINE_ARRAY[1]}
		fi
#		echo "Post:   MASTER=$MASTER IFACE=$IFACE #ADDR4=${#ADDR4} #ADDR6=${#ADDR6} #LINE=${#LINE} : $LINE"
	done
}

getUpdates()
{
	FILE_HOSTINFO="${ISSUE_BASE}/${FILE_BASE}05-updates" 
	if (( IGNORE_UPDATES )); then
		rm -f $FILE_HOSTINFO
		return 0
	fi
	UPDATES_TMP=$(mktemp /var/tmp/hostinfo-tmp.XXXXXXXXXX)
	rpm -qa --queryformat "%{INSTALLTIME}|%{VENDOR}|%{NAME}\n" | sort -nr > $UPDATES_TMP
	PATCH_STRING=$(zypper --non-interactive --no-gpg-checks patch-check 2>/dev/null | tail -1 | grep -i patches 2>/dev/null)
	LIP_EPOC=$(head -1 $UPDATES_TMP | cut -d\| -f1)
	LIP_DATE=$(date '+%c' -d @${LIP_EPOC})

	REPOS=$(zypper --non-interactive --no-gpg-checks repos 2>/dev/null | grep '^[ ]\{0,1\}[[:digit:]]' | wc -l)
	if (( REPOS > 1 ))
	then
		if [[ -n "$PATCH_STRING" ]]
		then
			PATCH_COUNT_NEEDED=$(echo $PATCH_STRING | cut -d' ' -f1)
			PATCH_COUNT_SECURITY=$(echo $PATCH_STRING | cut -d\( -f2 | cut -d' ' -f1)
		else
			PATCH_COUNT_NEEDED='Pending'
			PATCH_COUNT_SECURITY='Pending'
		fi
	else
		PATCH_COUNT_NEEDED='Not Registered'
		PATCH_COUNT_SECURITY='Not Registered'
	fi
	COUNT_NVR=$(awk -F\| '{print $2}' $UPDATES_TMP | egrep -iv "^SUSE LLC|^SUSE Linux Enterprise|gpg-pubkey$" | wc -l)

	printf "$FORMAT_OUT" "Last Updated Package:" "$LIP_DATE" > $FILE_HOSTINFO
	printf "$FORMAT_OUT" " Patches Needed:" "$PATCH_COUNT_NEEDED" >> $FILE_HOSTINFO
	printf "$FORMAT_OUT" " Security:" "$PATCH_COUNT_SECURITY" >> $FILE_HOSTINFO
	printf "$FORMAT_OUT" " 3rd Party Packages:" "$COUNT_NVR" >> $FILE_HOSTINFO
}

getMemory()
{
	FILE_HOSTINFO="${ISSUE_BASE}/${FILE_BASE}07-memory" 
	if (( IGNORE_MEM )); then
		rm -f $FILE_HOSTINFO
		return 0
	fi
	echo "Memory" > $FILE_HOSTINFO
	if [[ -x /usr/bin/free ]]
	then
		FREE=$(free -h | grep "^Mem")
		FREE_ARRAY=($FREE)
		MEM_TOTAL=${FREE_ARRAY[1]}
		MEM_FREE=${FREE_ARRAY[3]}
		MEM_AVAIL=${FREE_ARRAY[-1]}
		FREE=$(free -b | grep "^Mem")
		FREE_ARRAY=($FREE)
		CALC_TOTAL=${FREE_ARRAY[1]}
		CALC_AVAIL=${FREE_ARRAY[-1]}
		MEM_PERCENT=$(printf "%i" $(( CALC_AVAIL * 100 / CALC_TOTAL )))

		printf "$FORMAT_OUT" " Total/Free/Avail:" "${MEM_TOTAL}/${MEM_FREE}/${MEM_AVAIL} (${MEM_PERCENT}% Avail)" >> $FILE_HOSTINFO
	else
		MEM_TOTAL=$(cat /proc/meminfo | grep MemTotal: | awk '{printf "%i", $2/1024}')
		MEM_FREE=$(cat /proc/meminfo | grep MemFree: | awk '{printf "%i", $2/1024}')

		printf "$FORMAT_OUT" " Total/Free:" "${MEM_TOTAL}/${MEM_FREE} MB" >> $FILE_HOSTINFO
	fi
}

getDisks()
{
	FILE_HOSTINFO="${ISSUE_BASE}/${FILE_BASE}08-disks" 
	if (( IGNORE_DISK )); then
		rm -f $FILE_HOSTINFO
		return 0
	fi
	echo "Storage Devices" > $FILE_HOSTINFO
	DISK_LIST=$(fdisk -l | grep 'Disk /' | awk '{print $2,$3,$4}' | sed -e 's/://g;s/,//g')
	echo "$DISK_LIST" | while read DISK_INFO
	do
		THIS_DISK=($DISK_INFO)
		printf "$FORMAT_OUT" " ${THIS_DISK[0]}:" "${THIS_DISK[1]} ${THIS_DISK[2]}" >> $FILE_HOSTINFO
	done
}

getCPULoad() {
	FILE_HOSTINFO="${ISSUE_BASE}/${FILE_BASE}09-cpuload" 
	if (( IGNORE_CPULOAD )); then
		rm -f $FILE_HOSTINFO
		return 0
	fi
	CPU_COUNT=$(grep '^processor' /proc/cpuinfo 2>/dev/null | wc -l)
	
}

##############################################################################
# main
##############################################################################
if ! [[ -d ${ISSUE_BASE} ]]; then
	mkdir -p ${ISSUE_BASE}
fi
echo > ${ISSUE_BASE}/00-OS
echo > ${ISSUE_BASE}/90-OS

case $1 in
	dist*) getDate; getDistribution ;;
	date) getDate ;;
	host*) getDate; getHostname ;;
	kern*) getDate; getKernel ;;
	up*) getDate; getUpdates ;;
	net*) getDate; getNetAddr ;;
	mem*) getDate; getMemory ;;
	disk*) getDate; getDisks ;;
	*)
		getDistribution
		getDate
		getHostname
		getKernel
		getUpdates
		getNetAddr
		getMemory
		getDisks
		;;
esac

rm -f $UPDATES_TMP
/usr/sbin/issue-generator

