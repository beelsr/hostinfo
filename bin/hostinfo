#!/bin/bash
# Description: Displays basic system information
# Modified:    2014 Jan 2014

##############################################################################
#  Copyright (C) 2014 SUSE LLC
##############################################################################
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; version 2 of the License.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#  Authors/Contributors:
#     Jason Record (jrecord@suse.com)
#
##############################################################################

##############################################################################
# variables
##############################################################################
SVER=0.8.1
PAD=20
FORMAT_OUT="%-${PAD}s %s\n"
MISSING=$(mktemp /tmp/hostinfo.mission.XXXXXXXXXXXXXXX)
OPT_DISPLAY_DISK_FREE=0

##############################################################################
# functions
##############################################################################

showHostname()
{
	printf "$FORMAT_OUT" "Hostname:" "$(hostname)"
}

showDate()
{
	printf "$FORMAT_OUT" "Current Date:" "$(date '+%c')"
}

showDistribution()
{
	printf "$FORMAT_OUT" "Distribution:" "$(cat /etc/SuSE-release | grep SUSE | cut -d'(' -f1)"
	printf "$FORMAT_OUT" "Service Pack:" "$(cat /etc/SuSE-release | grep PATCHLEVEL | awk '{print $3}')"
}

showPackages()
{
	COUNT=$(rpm -qa --queryformat "%{VENDOR}\n" | egrep -vi "SUSE LINUX|(none)" | wc -l)
	printf "$FORMAT_OUT" "Non-Vendor Packages:" "$COUNT"
}

showKernel()
{
	KERNEL_STR=$(uname -r)
	printf "$FORMAT_OUT" "Architecture:" "$(uname -i)"
	printf "$FORMAT_OUT" "Kernel Version:" "$KERNEL_STR"
	KERN_RPM="kernel-$(echo $KERNEL_STR | awk -F- '{print $NF}')"
	KERN_DATE=$(rpm -q --queryformat "%{INSTALLTIME:date}" $KERN_RPM 2>/dev/null)
	if [[ -n "$KERN_DATE" ]]; then
		printf "$FORMAT_OUT" " -Installed:" "$KERN_DATE"
	else
		printf "$FORMAT_OUT" " -Installed:" "Unknown"
	fi
	TAINT=$(cat /proc/sys/kernel/tainted)
	TAINTED=0
	if [ ${#TAINT} -gt 1 ]; then
		TAINTED=1
	elif [ ${TAINT} -gt 0 ]; then
		TAINTED=1
	fi
	if (( TAINTED )); then
		# TAINT=$(( 1 + 2 + 4 + 8 + 16 + 32 + 64 + 128 + 256 ))
		# Refer to /usr/src/linux/include/linux/kernel.h and /usr/src/linux/kernel/panic.c (print_tainted function)
		TAINT_STRING=""
		test $((TAINT & 1))          -ne 0 && TAINT_STRING="${TAINT_STRING}P" || TAINT_STRING="${TAINT_STRING} "
		test $((TAINT & 2))          -ne 0 && TAINT_STRING="${TAINT_STRING}F" || TAINT_STRING="${TAINT_STRING} "
		test $((TAINT & 4))          -ne 0 && TAINT_STRING="${TAINT_STRING}S" || TAINT_STRING="${TAINT_STRING} "
		test $((TAINT & 8))          -ne 0 && TAINT_STRING="${TAINT_STRING}R" || TAINT_STRING="${TAINT_STRING} "
		test $((TAINT & 16))         -ne 0 && TAINT_STRING="${TAINT_STRING}M" || TAINT_STRING="${TAINT_STRING} "
		test $((TAINT & 32))         -ne 0 && TAINT_STRING="${TAINT_STRING}B" || TAINT_STRING="${TAINT_STRING} "
		test $((TAINT & 64))         -ne 0 && TAINT_STRING="${TAINT_STRING}U" || TAINT_STRING="${TAINT_STRING} "
		test $((TAINT & 128))        -ne 0 && TAINT_STRING="${TAINT_STRING}D" || TAINT_STRING="${TAINT_STRING} "
		test $((TAINT & 256))        -ne 0 && TAINT_STRING="${TAINT_STRING}A" || TAINT_STRING="${TAINT_STRING} "
		test $((TAINT & 512))        -ne 0 && TAINT_STRING="${TAINT_STRING}W" || TAINT_STRING="${TAINT_STRING} "
		test $((TAINT & 1024))       -ne 0 && TAINT_STRING="${TAINT_STRING}C" || TAINT_STRING="${TAINT_STRING} "
		test $((TAINT & 1073741824)) -ne 0 && TAINT_STRING="${TAINT_STRING}N" || TAINT_STRING="${TAINT_STRING} "
		test $((TAINT & 2147483648)) -ne 0 && TAINT_STRING="${TAINT_STRING}X" || TAINT_STRING="${TAINT_STRING} "
		printf "$FORMAT_OUT" " -Status:" "Tainted: $TAINT_STRING"
	else
		printf "$FORMAT_OUT" " -Status:" "Not Tainted"
	fi

}

showNetAddr()
{
	BINIP=$(which ip 2>/dev/null)
	test -z "$BINIP" && BINIP=$MISSING
	if [ -x $BINIP ]; then
		INTERFACES=$($BINIP a | egrep '^[0-9]' | sed -e 's/ //g' | egrep ':eth|:wlan|:vmnet')
		for INTERFACE in $INTERFACES
		do
			INUM=$(echo $INTERFACE | cut -d: -f1)
			IFAC=$(echo $INTERFACE | cut -d: -f2)
			IPAR=$($BINIP a | grep -A2 ^$INUM | grep 'inet ' | awk '{print $2}' | cut -d'/' -f1 )
			IMAC=$($BINIP a | grep -A2 ^$INUM | grep 'link/ether' | awk '{print $2}')
			IPRO=$IMAC
			NETFILE=$MISSING
			case $IFAC in
			eth*)
				NETFILE="/etc/sysconfig/network/ifcfg-eth-id-$IMAC"
				test -s $NETFILE || NETFILE="/etc/sysconfig/network/ifcfg-$IFAC"
				;;
			wlan*)
				NETFILE="/etc/sysconfig/network/ifcfg-wlan-id-$IMAC"
				test -s $NETFILE || NETFILE="/etc/sysconfig/network/ifcfg-$IFAC"
				;;
			esac
			test -s $NETFILE -a -r $NETFILE && { . $NETFILE; IPRO=$BOOTPROTO; }
			test -z "$IPAR" && IPAR="None"

			IPDISPLAY=$(printf "%-15s %-7s (%s)" $IPAR $IFAC $IPRO)
			printf "$FORMAT_OUT" "IPv4 Address:" "$IPDISPLAY"
		done
	else
		INTERFACES=$(find /etc/sysconfig/network -type f 2>/dev/null | egrep "ifcfg-eth|ifcfg-wlan" 2>/dev/null)
		for INTERFACE in $INTERFACES
		do
			. $INTERFACE
			if [ -z "$IPADDR" ]; then
				IPDISPLAY="($BOOTPROTO)"
			else
				IPDISPLAY=$(printf "%-15s (%s)" $IPADDR $BOOTPROTO)
			fi
			printf "$FORMAT_OUT" "IPv4 Address:" "$IPDISPLAY"
		done
	fi
}

showMemory()
{
	printf "$FORMAT_OUT" "Total/Free Memory:" "$(cat /proc/meminfo | grep MemTotal: | awk '{printf "%i", $2/1024}')/$(cat /proc/meminfo | grep MemFree: | awk '{printf "%i", $2/1024}') MB"
}

showDisks()
{
	DISK_SIZES=$(egrep '[s,h,xv,c][0-9]?d[a-z,0-9]$' /proc/partitions | awk '{printf "%s %u %s\n", "/dev/"$4, $3*1024/1000^3, "GB"}')
	if [ -z "$DISK_SIZES" ]; then
		DISK_SIZES=Unknown
	fi
	echo "$DISK_SIZES" | while read DISK_INFO
	do
		DEV_CHECK=$(echo $DISK_INFO | awk '{print $1}')
		DISK_FREE=0
		if (( OPT_DISPLAY_DISK_FREE )); then
			for DISK_ADD in $(df | grep ^${DEV_CHECK} | awk '{print $4}')
			do
				DISK_FREE=$(( DISK_FREE + DISK_ADD ))
			done
		fi
		if (( DISK_FREE )); then
			DISK_INFO="$DISK_INFO $DISK_FREE"
			THIS_DISK=$(echo $DISK_INFO | awk '{printf "%s %u/%u %s\n", $1, $2, $4*1024/1000^3, $3}')
		else
			THIS_DISK=$DISK_INFO
		fi
		printf "$FORMAT_OUT" "Hard Disk:" "$THIS_DISK"
	done
}

##############################################################################
# main
##############################################################################

echo '--------------------------------------------'
showHostname
showDate
showDistribution
#showPackages
#showUpdates
showKernel
showNetAddr
showMemory
showDisks
echo '--------------------------------------------'
rm -rf $MISSING
echo
