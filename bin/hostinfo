#!/bin/bash
# Description: Displays basic system information
# Modified:    2014 Feb 12

##############################################################################
#  Copyright (C) 2014 SUSE LLC
##############################################################################
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; version 2 of the License.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#  Authors/Contributors:
#     Jason Record (jrecord@suse.com)
#
##############################################################################

##############################################################################
# variables
##############################################################################
SVER=0.8.3
PAD=25
FORCE_UPDATE=0
IGNORE_UPDATES=0
IGNORE_NET=0
IGNORE_MEM=0
IGNORE_DISK=0

FORMAT_OUT="%-${PAD}s %s\n"
MISSING=$(mktemp /tmp/hostinfo.missing.XXXXXXXXXXXXXXX)
OPT_DISPLAY_DISK_FREE=0
INIT_FILE='/etc/hostinforc'
if [[ -s $INIT_FILE ]]
then
	. $INIT_FILE
else
	echo "ERROR: Missing hostinfo initialization file: $INIT_FILE"
	echo
	exit 1
fi

##############################################################################
# functions
##############################################################################
showHelp()
{
	echo "hostinfo - Gathers host information"
	echo
	echo "USAGE: hostinfo [OPTIONS]"
	echo "OPTIONS"
	echo " -h This help screen"
	echo " -n Ignore network address output"
	echo " -m Ignore memory output"
	echo " -d Ignore disk output"
	echo " -u Ignore updates output"
	echo " -f Force Pending updates"
	echo
}

forceUpdate()
{
	hrLine
	hostinfo-updates -v
}

exit_code() {
	XC=$1
	shift
	MSG="$@"
	[[ -n "$MSG" ]] && echo "$MSG"
	exit $XC
}

showHostname()
{
	printf "$FORMAT_OUT" "Hostname:" "$(hostname)"
}

showDate()
{
	printf "$FORMAT_OUT" "Current Date:" "$(date '+%c')"
}

showDistribution()
{
	printf "$FORMAT_OUT" "Distribution:" "$(cat /etc/SuSE-release | grep SUSE | cut -d'(' -f1)"
	printf "$FORMAT_OUT" " -Service Pack:" "$(cat /etc/SuSE-release | grep PATCHLEVEL | awk '{print $3}')"
}

showKernel()
{
	KERNEL_STR=$(uname -r)
	printf "$FORMAT_OUT" "Architecture:" "$(uname -i)"
	printf "$FORMAT_OUT" "Kernel Version:" "$KERNEL_STR"
	KERN_RPM="kernel-$(echo $KERNEL_STR | awk -F- '{print $NF}')"
	KERN_DATE=$(rpm -q --queryformat "%{INSTALLTIME:date}" $KERN_RPM 2>/dev/null)
	if [[ -n "$KERN_DATE" ]]; then
		printf "$FORMAT_OUT" " -Installed:" "$KERN_DATE"
	else
		printf "$FORMAT_OUT" " -Installed:" "Unknown"
	fi
	TAINT=$(cat /proc/sys/kernel/tainted)
	TAINTED=0
	if [ ${#TAINT} -gt 1 ]; then
		TAINTED=1
	elif [ ${TAINT} -gt 0 ]; then
		TAINTED=1
	fi
	if (( TAINTED )); then
		# TAINT=$(( 1 + 2 + 4 + 8 + 16 + 32 + 64 + 128 + 256 ))
		# Refer to /usr/src/linux/include/linux/kernel.h and /usr/src/linux/kernel/panic.c (print_tainted function)
		TAINT_STRING=""
		test $((TAINT & 1))          -ne 0 && TAINT_STRING="${TAINT_STRING}P" || TAINT_STRING="${TAINT_STRING} "
		test $((TAINT & 2))          -ne 0 && TAINT_STRING="${TAINT_STRING}F" || TAINT_STRING="${TAINT_STRING} "
		test $((TAINT & 4))          -ne 0 && TAINT_STRING="${TAINT_STRING}S" || TAINT_STRING="${TAINT_STRING} "
		test $((TAINT & 8))          -ne 0 && TAINT_STRING="${TAINT_STRING}R" || TAINT_STRING="${TAINT_STRING} "
		test $((TAINT & 16))         -ne 0 && TAINT_STRING="${TAINT_STRING}M" || TAINT_STRING="${TAINT_STRING} "
		test $((TAINT & 32))         -ne 0 && TAINT_STRING="${TAINT_STRING}B" || TAINT_STRING="${TAINT_STRING} "
		test $((TAINT & 64))         -ne 0 && TAINT_STRING="${TAINT_STRING}U" || TAINT_STRING="${TAINT_STRING} "
		test $((TAINT & 128))        -ne 0 && TAINT_STRING="${TAINT_STRING}D" || TAINT_STRING="${TAINT_STRING} "
		test $((TAINT & 256))        -ne 0 && TAINT_STRING="${TAINT_STRING}A" || TAINT_STRING="${TAINT_STRING} "
		test $((TAINT & 512))        -ne 0 && TAINT_STRING="${TAINT_STRING}W" || TAINT_STRING="${TAINT_STRING} "
		test $((TAINT & 1024))       -ne 0 && TAINT_STRING="${TAINT_STRING}C" || TAINT_STRING="${TAINT_STRING} "
		test $((TAINT & 1073741824)) -ne 0 && TAINT_STRING="${TAINT_STRING}N" || TAINT_STRING="${TAINT_STRING} "
		test $((TAINT & 2147483648)) -ne 0 && TAINT_STRING="${TAINT_STRING}X" || TAINT_STRING="${TAINT_STRING} "
		printf "$FORMAT_OUT" " -Status:" "Tainted: $TAINT_STRING"
	else
		printf "$FORMAT_OUT" " -Status:" "Not Tainted"
	fi

}

hrLine()
{
	echo '-----------------------------------------------------------'
}

showNetAddr()
{
   NET_LIST=$(ifconfig -a)
   STATE=1
   FIRST=1
   IFACE=''
   IADDR=''
   echo "$NET_LIST" | while read LINE
   do
      if (( STATE ))
      then
         if [[ -n "$LINE" ]]
         then
            if (( FIRST ))
            then
               IFACE=$(echo $LINE | awk '{print $1}')
               FIRST=0
               [[ "$IFACE" == "lo" ]] && STATE=0
            elif echo "$LINE" | grep "^inet addr:" &>/dev/null
            then
               IADDR=$(echo $LINE | cut -d' ' -f2 | cut -d\: -f2)
            fi
         elif [[ -z "$LINE" ]]
         then
				if [[ -n "$IADDR" ]]
				then
					printf "$FORMAT_OUT" "IPv4 Address:" "$IFACE $IADDR"
				else
					printf "$FORMAT_OUT" "IPv4 Address:" "$IFACE (Unconfigured)"
				fi
            IFACE=''
            IADDR=''
            STATE=1
            FIRST=1
         fi
      elif [[ -z "$LINE" ]]
      then
         STATE=1
         FIRST=1
      fi
   done
}

showUpdates()
{
	if [[ -s $FILE_LAST_PACKAGE ]]
	then
		OUTPUT=$(cat $FILE_LAST_PACKAGE)
	else
		OUTPUT="Pending"
	fi
	printf "$FORMAT_OUT" "Last Updated Package:" "$OUTPUT"
	if [[ -s $FILE_PATCH_CHECK ]]
	then
		OUTPUT_N=$(cat $FILE_PATCH_CHECK | cut -d\| -f1)
		OUTPUT_S=$(cat $FILE_PATCH_CHECK | cut -d\| -f2)
	else
		OUTPUT_N="Pending"
		OUTPUT_S="Pending"
	fi
	printf "$FORMAT_OUT" " -Patches Needed:" "$OUTPUT_N"
	printf "$FORMAT_OUT" " -Security:" "$OUTPUT_S"
	if [[ -s $FILE_NON_VENDOR_PACKAGES ]]
	then
		OUTPUT=$(cat $FILE_NON_VENDOR_PACKAGES)
	else
		OUTPUT="Pending"
	fi
	printf "$FORMAT_OUT" " -3rd Party Packages:" "$OUTPUT"
}

showMemory()
{
	printf "$FORMAT_OUT" "Total/Free Memory:" "$(cat /proc/meminfo | grep MemTotal: | awk '{printf "%i", $2/1024}')/$(cat /proc/meminfo | grep MemFree: | awk '{printf "%i", $2/1024}') MB"
}

showDisks()
{
	DISK_SIZES=$(egrep '[s,h,xv,c][0-9]?d[a-z,0-9]$' /proc/partitions | awk '{printf "%s %u %s\n", "/dev/"$4, $3*1024/1000^3, "GB"}')
	if [ -z "$DISK_SIZES" ]; then
		DISK_SIZES=Unknown
	fi
	echo "$DISK_SIZES" | while read DISK_INFO
	do
		DEV_CHECK=$(echo $DISK_INFO | awk '{print $1}')
		DISK_FREE=0
		if (( OPT_DISPLAY_DISK_FREE )); then
			for DISK_ADD in $(df | grep ^${DEV_CHECK} | awk '{print $4}')
			do
				DISK_FREE=$(( DISK_FREE + DISK_ADD ))
			done
		fi
		if (( DISK_FREE )); then
			DISK_INFO="$DISK_INFO $DISK_FREE"
			THIS_DISK=$(echo $DISK_INFO | awk '{printf "%s %u/%u %s\n", $1, $2, $4*1024/1000^3, $3}')
		else
			THIS_DISK=$DISK_INFO
		fi
		printf "$FORMAT_OUT" "Hard Disk:" "$THIS_DISK"
	done
}

##############################################################################
# main
##############################################################################
while getopts :hfnmdu TMPOPT
do
	case $TMPOPT in
	\:)	showHelp
			case $OPTARG in
			*) echo "ERROR: Missing Argument -$OPTARG"
				;;
			esac
			echo; exit 1 ;;
	\?)	showHelp
			case $OPTARG in
			*) echo "ERROR: Invalid Option -$OPTARG"
				;;
			esac
			echo; exit 1 ;;
	n) IGNORE_NET=1 ;;
	m) IGNORE_MEM=1 ;;
	d) IGNORE_DISK=1 ;;
	u) IGNORE_UPDATES=1 ;;
	h) showHelp; exit 0 ;;
	f) FORCE_UPDATE=1 ;;
	esac
done

(( FORCE_UPDATE )) && forceUpdate
hrLine
showHostname
showDate
showDistribution
showKernel
(( IGNORE_UPDATES )) || showUpdates
(( IGNORE_NET )) || showNetAddr
(( IGNORE_MEM )) || showMemory
(( IGNORE_DISK )) || showDisks
hrLine
rm -rf $MISSING
echo
